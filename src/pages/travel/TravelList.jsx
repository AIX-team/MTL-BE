import React, { useState, useEffect, useMemo } from "react";
import "../../css/travel/TravelList.css";
import osakaImg from "../../images/osaka.png";
import matsuyamaImg from "../../images/matsuyama.png";
import tokyoImg from "../../images/tokyo.png";
import TravelPageModal from "./TravelPageModal";
import { FaSearch, FaTimes } from 'react-icons/fa';

const TravelList = () => {
  const [travelItems, setTravelItems] = useState([
    {
      id: 1,
      title: "Ïò§ÏÇ¨Ïπ¥ Ïó¨Ìñâ",
      date: "2025-05-18",
      period: "ÏùºÏ†ï 3Ïùº",
      image: osakaImg, // importÌïú Ïù¥ÎØ∏ÏßÄ ÏÇ¨Ïö©
      isFavorite: true,
      isPinned: false,
    },
    {
      id: 2,
      title: "ÎßàÏì∞ÏïºÎßà Ïó¨Ìñâ",
      date: "2025-03-27",
      period: "ÏùºÏ†ï 5Ïùº",
      image: matsuyamaImg, // importÌïú Ïù¥ÎØ∏ÏßÄ ÏÇ¨Ïö©
      isFavorite: true,
      isPinned: false,
    },

    {
      id: 3,
      title: "ÎèÑÏøÑ Ïó¨Ìñâ",
      date: "2025-02-21",
      period: "ÏùºÏ†ï 4Ïùº",
      image: tokyoImg, // importÌïú Ïù¥ÎØ∏ÏßÄ ÏÇ¨Ïö©
      isFavorite: false,
      isPinned: false,
    },
    {
      id: 4,
      title: "ÍµêÌÜ† Ïó¨Ìñâ",
      date: "2025-02-21",
      period: "ÏùºÏ†ï 4Ïùº",
      image: tokyoImg, // importÌïú Ïù¥ÎØ∏ÏßÄ ÏÇ¨Ïö©
      isFavorite: false,
      isPinned: false,
    },
    {
      id: 5,
      title: "ÍµêÌÜ† Ïó¨Ìñâ",
      date: "2025-02-21",
      period: "ÏùºÏ†ï 4Ïùº",
      image: tokyoImg, // importÌïú Ïù¥ÎØ∏ÏßÄ ÏÇ¨Ïö©
      isFavorite: false,
      isPinned: false,
    },
  ]);

  const [activeFilter, setActiveFilter] = useState("latest");
  const [showModal, setShowModal] = useState(false);
  const [selectedItemId, setSelectedItemId] = useState(null);
  const [pinnedItems, setPinnedItems] = useState([]);
  const [searchText, setSearchText] = useState("");

  const handleFilterClick = (filter) => {
    setActiveFilter(filter);
  };

  // Í≥†Ï†ï ÌÜ†Í∏Ä Ìï∏Îì§Îü¨
  const handlePinClick = (itemId) => {
    if (pinnedItems.includes(itemId)) {
      setPinnedItems((prev) => prev.filter((id) => id !== itemId));
    } else {
      setPinnedItems((prev) => [...prev, itemId]);
    }
    setShowModal(false);
  };

  // Ï¶êÍ≤®Ï∞æÍ∏∞ ÌÜ†Í∏Ä Ìï®Ïàò
  const toggleFavorite = (id) => {
    setTravelItems(
      travelItems.map((item) =>
        item.id === id ? { ...item, isFavorite: !item.isFavorite } : item
      )
    );
  };

  const handleMoreOptionsClick = (id) => {
    setSelectedItemId(id);
    setShowModal(true);
  };


  // Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞ ÌôïÏù∏
  useEffect(() => {
    console.log("Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞ ÌôïÏù∏:", travelItems);
    console.log("Ï≤´ Î≤àÏß∏ ÏïÑÏù¥ÌÖú:", travelItems[0]);
  }, [travelItems]);

  // ÌïÑÌÑ∞ÎßÅÎêú Îç∞Ïù¥ÌÑ∞ Í≥ÑÏÇ∞
  const filteredData = useMemo(() => {
    // activeFilterÍ∞Ä 'favorite'Ïùº ÎïåÎßå Ï¶êÍ≤®Ï∞æÍ∏∞ ÌïÑÌÑ∞ÎßÅ Ï†ÅÏö©
    if (activeFilter === "favorite") {
      return travelItems.filter((item) => item.isFavorite === true);
    }
    return travelItems;
  }, [travelItems, activeFilter]);

  // ÌïÑÌÑ∞ÎßÅ Î∞è Ï†ïÎ†¨Îêú Îç∞Ïù¥ÌÑ∞ Í≥ÑÏÇ∞
  const sortedAndFilteredData = useMemo(() => {
    let filtered = [...filteredData];

    // Í≥†Ï†ïÎêú Ìï≠Î™©ÏùÑ ÏµúÏÉÅÎã®ÏúºÎ°ú Ï†ïÎ†¨
    return filtered.sort((a, b) => {
      // Îëò Îã§ Í≥†Ï†ïÎêòÏóàÍ±∞ÎÇò Îëò Îã§ Í≥†Ï†ïÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ Í∏∞Ï°¥ Ï†ïÎ†¨ Ïú†ÏßÄ
      const isPinnedA = pinnedItems.includes(a.id);
      const isPinnedB = pinnedItems.includes(b.id);

      if (isPinnedA === isPinnedB) {
        // ÎÇ†Ïßú Í∏∞Ï§Ä Ï†ïÎ†¨
        const dateA = new Date(a.date);
        const dateB = new Date(b.date);
        return activeFilter === "latest" ? dateB - dateA : dateA - dateB;
      }
      // Í≥†Ï†ïÎêú Ìï≠Î™©ÏùÑ ÏúÑÎ°ú
      return isPinnedB ? 1 : -1;
    });
  }, [filteredData, activeFilter, pinnedItems]);

  // Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏Ïö© ÏΩòÏÜî Î°úÍ∑∏
  console.log("Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞:", travelItems);
  console.log("ÌïÑÌÑ∞ÎßÅÎêú Îç∞Ïù¥ÌÑ∞:", filteredData);

  // ÏïÑÏù¥ÌÖú Ïù¥Î¶Ñ ÏàòÏ†ï Ìï®Ïàò
  const handleUpdateTitle = (itemId, newTitle) => {
    setTravelItems(travelItems.map(item =>
      item.id === itemId ? { ...item, title: newTitle } : item
    ));
  };

  // ÏïÑÏù¥ÌÖú ÏÇ≠Ï†ú Ìï®Ïàò
  const handleDeleteItem = (itemId) => {
    setTravelItems(travelItems.filter(item => item.id !== itemId));
  };

  return (
    <div className="SJ-Travel-List">
      <div className="SJ-travel-container">
        <div className="SJ-filter-buttons">
          <button
            className={`SJ-filter-btn ${activeFilter === "latest" ? "active" : ""
              }`}
            onClick={() => handleFilterClick("latest")}
          >
            ÏµúÏã†Ïàú
          </button>
          <button
            className={`SJ-filter-btn ${activeFilter === "created" ? "active" : ""
              }`}
            onClick={() => handleFilterClick("created")}
          >
            ÏÉùÏÑ±Ïùº
          </button>
          <button
            className={`SJ-filter-btn ${activeFilter === "favorite" ? "active" : ""
              }`}
            onClick={() => handleFilterClick("favorite")}
          >
            Ï¶êÍ≤®Ï∞æÍ∏∞
          </button>
        </div>

        <div className="SJ-search-Container">
          <input
            type="text"
            placeholder="ÎÇ¥Í∞Ä ÎßåÎì† Ïó¨ÌñâÏùÑ Í≤ÄÏÉâÌïòÏÑ∏Ïöî"
            className="SJ-search-input"
            value={searchText}
            onChange={(e) => setSearchText(e.target.value)}
          />

          <div className="SJ-search-button-container">
            {searchText && (
              <button className="SJ-search-clear" onClick={() => setSearchText("")}>
                <FaTimes />
              </button>
            )}
            <button className="SJ-search-icon"><FaSearch /></button>
          </div>
        </div>

        <div className="SJ-travel-grid">
          {sortedAndFilteredData.map((item) => (

            <div key={item.id} className="SJ-travel-card">

              {pinnedItems.includes(item.id) && (
                <div className="SJ-pin-icon">üìå</div>
              )}

              <div className="SJ-travel-img">
                <img src={item.image} alt={item.title} />
              </div>

              <div className="SJ-card-content">

                <div
                  className={`WS-favorite-button ${item.isFavorite ? "filled" : "outlined"
                    }`}
                  onClick={() => toggleFavorite(item.id)}
                >
                  {item.isFavorite ? "‚ô•" : "‚ô°"}
                </div>

                <div className="SJ-card-header">
                  <div className="SJ-card-title">{item.title}</div>
                </div>

                <div className="SJ-card-footer">
                  <span className="SJ-card-period">{item.period}</span>
                  <span className="SJ-card-date">{item.date}</span>
                </div>

                <button
                  className="SJ-more-button"
                  onClick={() => handleMoreOptionsClick(item.id)}
                >
                  ‚ãÆ
                </button>
              </div>
            </div>
          ))}
        </div>
        <TravelPageModal
          showModal={showModal}
          setShowModal={setShowModal}
          selectedItemId={selectedItemId}
          handlePinToggle={handlePinClick}
          pinnedItems={pinnedItems}
          onUpdateTitle={handleUpdateTitle}
          onDeleteItem={handleDeleteItem}
          items={travelItems}
        />
      </div>
    </div>
  );
};

export default TravelList;
